# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :beta do
    build_app(workspace: "HealthFoodMe.xcworkspace", scheme: "HealthFoodMe")
    upload_to_testflight
  end

  lane :set_version do |options|
    case options[:version]
    when "major", "minor", "patch"
      increment_version_number(bump_type: options[:version])
    else
      increment_version_number(version_number: options[:version])
    end
  
    increment_build_number(
      build_number: Time.new.strftime("%Y.%m%d.%H%M") # 2021년 4월 17일 14시 53분 -> 2021.0417.1453
      )
    version_number = "#{lane_context[SharedValues::VERSION_NUMBER]}(#{lane_context[SharedValues::BUILD_NUMBER]})"
    commit_version_bump(
      message: "Update version - #{version_number}"
      )
    add_git_tag(tag: "v#{version_number}")
    push_to_git_remote
  end

lane :release do
  # 5. keychain 초기화 🔑
  create_keychain(
    name: ENV["KEYCHAIN_NAME"],
    password: ENV["KEYCHAIN_PASSWORD"],
    timeout: 1800,
    default_keychain: true,
    unlock: true,
    lock_when_sleeps: false
  )

  app_store_connect_api_key(
    key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
    issuer_id: ENV["APP_STORE_CONNECT_API_ISSUER_ID"],
    key_content: ENV["APP_STORE_CONNECT_API_KEY_CONTENT"]
    )

  # 6. match를 실행하여 인증서 및 프로파일 불러오기 ✍🏼
  match(
    git_url: "git@github.com:Health-Food-Me/Health-Food-Me-iOS.git",
    storage_mode: "git",
    type: "appstore",
    readonly: true,
    keychain_name: ENV["KEYCHAIN_NAME"],
    keychain_password: ENV["KEYCHAIN_PASSWORD"]
    )

  # 7. 빌드 및 내보내기 🏗
  gym(
    workspace: ENV["XCWORKSPACE"],
    scheme: ENV["PRODUCTION_SCHEME"],
    configuration: "Release",
    export_options: {
      method: "app-store",
      signingStyle: "manual"
    }
  )

  # 8. 앱스토어 업로드 🎉
  deliver(
    submit_for_review: true,
    force: true,
    skip_screenshots: true,
    automatic_release: true,
    precheck_include_in_app_purchases: false,
    app_review_information: {
      demo_user: "demo@user.net",
      demo_password: "DEMO-PASSWORD"
      }
    )
end


# 에러 발생 시 호출 됨
error do |lane, exception|
  slack_when_error_occured(
    message: "",
    payload: {
      "Version" => lane_context[SharedValues::VERSION_NUMBER],
      "Build number" => lane_context[SharedValues::BUILD_NUMBER],
      "Date" => Time.new.to_s,
      "Error Info" => exception.message
      }
    )
  end
end

# match 인증서 파일 생성 -> 관리자용

platform :ios do
  lane :matchByTeam do
      match(git_branch: "master", type: "appstore", username: "ckrgkswnsgh@icloud.com")
      match(git_branch: "master", type: "development", username: "ckrgkswnsgh@icloud.com")
  end
end

# match 인증서 받아오기 -> 팀원용

platform :ios do
  lane :matchReadOnly do
      match(git_branch: "master", type: "appstore", username: "ckrgkswnsgh@icloud.com", readonly: true)
      match(git_branch: "master", type: "development", username: "ckrgkswnsgh@icloud.com", readonly: true)
  end
end